class Room:
    def __init__(self, exits):
        self.exits = exits

class Player:
    def __init__(self, current_room):
        self.current_room = current_room

def move_player(player, direction):
    if direction in player.current_room.exits:
        player.current_room = player.current_room.exits[direction]
        print("You move to the next room.")
    else:
        print("There is no exit in that direction.")

def main():
    room1 = Room({"north": None, "east": None, "south": None, "west": None})
    room2 = Room({"north": None, "east": None, "south": None, "west": None})

    # Define exits for each room
    room1.exits["north"] = room2
    room2.exits["south"] = room1

    player = Player(room1)

    while True:
        print("You are in a room.")
        print("Exits:", list(player.current_room.exits.keys()))
        action = input("Choose a direction to move (or 'quit' to exit): ").lower()

        if action == 'quit':
            print("Goodbye!")
            break
        move_player(player, action)

if __name__ == "__main__":
    main()
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 5f;

    void Update()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        Vector3 movement = new Vector3(horizontalInput, 0f, verticalInput) * moveSpeed * Time.deltaTime;
        transform.Translate(movement);
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Exit"))
        {
            RoomExit exit = other.GetComponent<RoomExit>();
            if (exit != null)
            {
                // Load the next scene
                SceneTransitionManager.Instance.LoadNextScene(exit.nextSceneName);
            }
        }
    }
}
using UnityEngine.SceneManagement;
using UnityEngine;

public class SceneTransitionManager : MonoBehaviour
{
    public static SceneTransitionManager Instance;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    public void LoadNextScene(string sceneName)
    {
        SceneManager.LoadScene(sceneName);
    }
}

using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 5f;
    private bool isMoving = false;
    private Vector3 destination;
    private RoomExit currentExit;

    void Update()
    {
        if (!isMoving)
        {
            if (Input.GetKeyDown(KeyCode.UpArrow))
                MoveToExit("north");
            else if (Input.GetKeyDown(KeyCode.DownArrow))
                MoveToExit("south");
            else if (Input.GetKeyDown(KeyCode.LeftArrow))
                MoveToExit("west");
            else if (Input.GetKeyDown(KeyCode.RightArrow))
                MoveToExit("east");
        }
        else
        {
            MovePlayer();
        }
    }

    void MoveToExit(string direction)
    {
        RaycastHit hit;
        if (Physics.Raycast(transform.position, GetDirectionVector(direction), out hit, Mathf.Infinity))
        {
            RoomExit exit = hit.collider.GetComponent<RoomExit>();
            if (exit != null)
            {
                isMoving = true;
                currentExit = exit;
                destination = hit.collider.transform.position;
                transform.LookAt(destination);
            }
        }
    }

    void MovePlayer()
    {
        transform.position = Vector3.MoveTowards(transform.position, destination, moveSpeed * Time.deltaTime);
        if (transform.position == destination)
        {
            // Stop moving
            isMoving = false;
            currentExit.TriggerExit();
        }
    }

    Vector3 GetDirectionVector(string direction)
    {
        switch (direction)
        {
            case "north":
                return transform.forward;
            case "south":
                return -transform.forward;
            case "east":
                return transform.right;
            case "west":
                return -transform.right;
            default:
                return Vector3.zero;
        }
    }
}

using UnityEngine;
using UnityEngine.SceneManagement;

public class RoomExit : MonoBehaviour
{
    public string nextSceneName;
    public string entranceExitName;

    public void TriggerExit()
    {
        // Load the next scene
        SceneTransitionManager.Instance.LoadNextScene(nextSceneName, entranceExitName);
    }
}


using UnityEngine;

public class PowerPellet : MonoBehaviour
{
    public int pelletValue = 1; // Value of each power pellet

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            // Increase the number of collected pellets
            GameManager.Instance.CollectPellet(pelletValue);
            // Remove the power pellet from the scene
            Destroy(gameObject);
        }
    }
}



using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;

    private int totalPellets = 0;

    public Text pelletCountText;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    public void CollectPellet(int value)
    {
        totalPellets += value;
        UpdatePelletCountUI();
    }

    private void UpdatePelletCountUI()
    {
        if (pelletCountText != null)
        {
            pelletCountText.text = "Pellets: " + totalPellets;
        }
    }
}

using UnityEngine;
using UnityEngine.SceneManagement;

public class PowerPellet : MonoBehaviour
{
    public int pelletValue = 1; // Value of each power pellet
    public string fightSceneName; // Name of the fight scene

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            // Trigger the transition to the fight scene
            SceneTransitionManager.Instance.LoadNextScene(fightSceneName);
            // Remove the power pellet from the scene
            Destroy(gameObject);
        }
    }
}

using UnityEngine;
using UnityEngine.SceneManagement;

public class PowerPellet : MonoBehaviour
{
    public int pelletValue = 1; // Value of each power pellet
    public string fightSceneName; // Name of the fight scene

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            // Trigger the transition to the fight scene
            SceneManager.LoadScene(fightSceneName);
            // Remove the power pellet from the scene
            Destroy(gameObject);
        }
    }
}

using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class Enemy : MonoBehaviour
{
    public int health = 100;
    public Text hitText;
    public Text deathText;
    public AudioClip hitSound;
    public AudioClip deathSound;

    public void TakeDamage(int damage)
    {
        health -= damage;

        if (health <= 0)
        {
            Die();
        }
        else
        {
            // Display hit text
            if (hitText)
            {
                hitText.text = "Hit!";
                Invoke("ClearHitText", 1f);
            }
            // Play hit sound
            if (hitSound)
            {
                AudioSource.PlayClipAtPoint(hitSound, transform.position);
            }
        }
    }

    void Die()
    {
        // Display death text
        if (deathText)
        {
            deathText.text = "Enemy Defeated!";
            Invoke("ClearDeathText", 2f);
        }
        // Play death sound
        if (deathSound)
        {
            AudioSource.PlayClipAtPoint(deathSound, transform.position);
        }
        // Destroy the enemy
        Destroy(gameObject);
    }

    void ClearHitText()
    {
        if (hitText)
        {
            hitText.text = "";
        }
    }

    void ClearDeathText()
    {
        if (deathText)
        {
            deathText.text = "";
        }
    }
}

using UnityEngine;
using UnityEngine.SceneManagement;

public class PelletManager : MonoBehaviour
{
    public GameObject fightScene; // Reference to the fight scene
    public Transform playerSpawnPoint; // Spawn point of the player at the beginning of the dungeon

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            // Trigger fight scene
            fightScene.SetActive(true);
            // Deactivate the pellet temporarily
            gameObject.SetActive(false);
        }
    }

    public void PlayerWonFight()
    {
        // Reactivate the pellet
        gameObject.SetActive(true);
        // Return player to the dungeon
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }

    public void PlayerLostFight()
    {
        // Return player to the beginning of the dungeon
        other.gameObject.transform.position = playerSpawnPoint.position;
        // Reactivate the pellet
        gameObject.SetActive(true);
    }
}

